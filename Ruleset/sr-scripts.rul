# ███████╗██╗  ██╗████████╗███████╗███╗   ██╗██████╗ ███████╗██████╗
# ██╔════╝╚██╗██╔╝╚══██╔══╝██╔════╝████╗  ██║██╔══██╗██╔════╝██╔══██╗
# █████╗   ╚███╔╝    ██║   █████╗  ██╔██╗ ██║██║  ██║█████╗  ██║  ██║
# ██╔══╝   ██╔██╗    ██║   ██╔══╝  ██║╚██╗██║██║  ██║██╔══╝  ██║  ██║
# ███████╗██╔╝ ██╗   ██║   ███████╗██║ ╚████║██████╔╝███████╗██████╔╝
# ╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═══╝╚═════╝ ╚══════╝╚═════╝
extended:
  scripts:
# ╦╔╦╗╔═╗╔╦╗  ╔═╗╦═╗╔═╗╔═╗╔╦╗╦╔═╗╔╗╔
# ║ ║ ║╣ ║║║  ║  ╠╦╝║╣ ╠═╣ ║ ║║ ║║║║
# ╩ ╩ ╚═╝╩ ╩  ╚═╝╩╚═╚═╝╩ ╩ ╩ ╩╚═╝╝╚╝
  # ┌─┐┬ ┬┌┬┐┌─┐   ┌─┐┬─┐┬┌┬┐┌─┐
  # ├─┤│ │ │ │ │───├─┘├┬┘││││├┤
  # ┴ ┴└─┘ ┴ └─┘   ┴  ┴└─┴┴ ┴└─┘
    createItem:
      - offset: 51
        code: |
          var int start_primed;
          item.getTag start_primed Tag.START_PRIMED;

          if eq start_primed 1;
            item.setFuseTimer 0;
            end;
          return;
# ╦╔╦╗╔═╗╔╦╗  ╔═╗╔═╗╦  ╔═╗╔═╗╔╦╗╦╔═╗╔╗╔
# ║ ║ ║╣ ║║║  ╚═╗║╣ ║  ║╣ ║   ║ ║║ ║║║║
# ╩ ╩ ╚═╝╩ ╩  ╚═╝╚═╝╩═╝╚═╝╚═╝ ╩ ╩╚═╝╝╚╝
  # ┌┬┐┌─┐┌─┐┌─┐┌─┐┬┌┐┌┌─┐  ┌┐ ┌─┐┌─┐┌─┐┌┬┐  ┌─┐┌─┐┬─┐┬┌┬┐┌─┐┌─┐
  # │││├─┤│ ┬├─┤┌─┘││││├┤───├┴┐├─┤└─┐├┤  ││  └─┐├─┘├┬┘│ │ ├┤ └─┐
  # ┴ ┴┴ ┴└─┘┴ ┴└─┘┴┘└┘└─┘  └─┘┴ ┴└─┘└─┘─┴┘  └─┘┴  ┴└─┴ ┴ └─┘└─┘
    selectItemSprite:
    # Select weapon bigSprite based on ammo item
      - offset: 1
        code: |
          var ptr BattleItem ammoItem;
          var ptr RuleItem weaponRuleset;
          var ptr RuleItem ammoRuleset;
          var int changeSprite;

          var int base_index;
          var int ammo_offset;
          var int temp;

          if eq blit_part blit_item_big; # if blit_part == blit_item_big; -> on bliting big item
            item.getRuleItem weaponRuleset; # get ruleset of item as weaponRuleset
            weaponRuleset.getTag changeSprite Tag.ALLOW_AMMO_TO_RESPRITE; # find matching tag: ALLOW_AMMO_TO_RESPRITE

            if eq changeSprite 1; # if changeSprite == 1; -> tagged as resprite
              item.getAmmoItem ammoItem; # get ammo item as ammoItem
              ammoItem.getRuleItem ammoRuleset; # get ruleset of item as ammoRuleset
              ammoRuleset.getTag ammo_offset Tag.OFFSET_BIGOB_WEAPON; # find offset valuse as ammo_offset
              add sprite_index -1; # Simulates ammo done
              add sprite_index ammo_offset; # ammo offset applied to sprite_index
              rules.getSpriteOffsetBigobs sprite_index temp;
              return sprite_index;
            end;
          end;
          return sprite_index;